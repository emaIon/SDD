#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

#define LINESIZE 128
#define COUNT 10

typedef struct FileProperties FileProperties;
typedef struct TreeNode TreeNode;

struct FileProperties {
	int id;
	char* filename;
};

struct TreeNode {
	FileProperties fp;
	TreeNode* left;
	TreeNode* right;
};

void insertTreeNode(TreeNode** root, FileProperties fp) {
	if (*root) {
		if (fp.id < (*root)->fp.id) {
			insertTreeNode(&(*root)->left, fp);
		}
		else {
			insertTreeNode(&(*root)->right, fp);
		}
	}
	else {
		TreeNode* newNode = malloc(sizeof(TreeNode));
		newNode->fp = fp;
		newNode->left = NULL;
		newNode->right = NULL;
		*root = newNode;
	}
}

void printTree(TreeNode* tree, int space) {
	if (tree) {

		space += COUNT;

		printTree(tree->right, space);

		printf("\n");
		for (int i = COUNT; i < space; i++) {
			printf(" ");
		}
		printf("%d", tree->fp.id);

		printTree(tree->left, space);

	}
}

FileProperties readOneFromFile(FILE* f) {

	char buffer[LINESIZE];

	fgets(buffer, LINESIZE, f);

	FileProperties fp;
	char* token = strtok(buffer, ",");

	fp.id = atoi(token);

	token = strtok(NULL, ",");
	fp.filename = malloc((strlen(token) + 1) * sizeof(char));
	strcpy(fp.filename, token);

	return fp;

}

void readDataFromFile(TreeNode** tree, const char* fileName) {

	FILE* f;
	f = fopen(fileName, "r");

	while (!feof(f)) {
		insertTreeNode(tree, readOneFromFile(f));
	}
}


//1
int countNodesWithCondition(TreeNode* tree, int threshold) {
	if (!tree)
		return 0;

	int count = 0;
	if (tree->fp.id < threshold)
		count = 1;

	return count +
		countNodesWithCondition(tree->left, threshold) +
		countNodesWithCondition(tree->right, threshold);
}
//2
FileProperties deleteNode(TreeNode** root, int id) {
	FileProperties deleted = { -1, NULL };

	if (!*root)
		return deleted;

	if (id < (*root)->fp.id) {
		deleted = deleteNode(&(*root)->left, id);
	}
	else if (id > (*root)->fp.id) {
		deleted = deleteNode(&(*root)->right, id);
	}
	else {
		deleted = (*root)->fp;
		TreeNode* temp;
		if (!(*root)->left) {
			temp = *root;
			*root = (*root)->right;
			free(temp);
		}
		else if (!(*root)->right) {
			temp = *root;
			*root = (*root)->left;
			free(temp);
		}
		else {
			// Min from right
			TreeNode* successor = (*root)->right;
			while (successor->left)
				successor = successor->left;

			(*root)->fp = successor->fp;
			deleteNode(&(*root)->right, successor->fp.id);
		}
	}
	return deleted;
}

// sterge toate nodurile cu id < threshold
void deleteByCondition(TreeNode** root, int threshold) {
	if (!root || !*root)
		return;

	deleteByCondition(&(*root)->left, threshold);
	deleteByCondition(&(*root)->right, threshold);

	if ((*root)->fp.id < threshold)
		deleteNode(root, (*root)->fp.id);
}



int main() {

	TreeNode* tree = NULL;

	readDataFromFile(&tree, "files.txt");
	printTree(tree, 20);

	printf("\n\nNumar noduri cu id < 6: %d\n", countNodesWithCondition(tree, 6));

	printf("\n\nSterg noduri cu id < 6...\n");
	deleteByCondition(&tree, 6);
	printTree(tree, 20);

	return 0;
}
